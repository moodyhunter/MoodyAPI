syntax = "proto3";

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

import "common/common.proto";
import "privileged/privileged.proto";
import "notifications/notifications.proto";
import "dns/dns.proto";

package MoodyAPI;

option go_package = "api.mooody.me/models";

message CameraState
{
    bool state = 1;
}

message SubscribeCameraStateChangeRequest
{
    common.Auth auth = 1;
}

message UpdateCameraStateRequest
{
    common.Auth auth = 1;
    CameraState state = 2;
}

message KeepAliveRequest
{
    common.Auth auth = 1;
}

message KeepAliveMessage
{
    google.protobuf.Timestamp time = 1;
}

service MoodyAPIService
{
    // Keep alive
    rpc KeepAlive(KeepAliveRequest) returns (stream KeepAliveMessage);

    // Camera state
    // For use on controlers
    rpc SetCameraState(UpdateCameraStateRequest) returns (google.protobuf.Empty);
    rpc SubscribeCameraStateReport(SubscribeCameraStateChangeRequest) returns (stream CameraState);

    // For camera agent
    rpc ReportCameraState(UpdateCameraStateRequest) returns (google.protobuf.Empty);
    rpc SubscribeCameraControlSignal(SubscribeCameraStateChangeRequest) returns (stream CameraState);

    // Notification Channels
    rpc CreateNotificationChannel(notifications.CreateChannelRequest) returns (notifications.CreateChannelResponse);
    rpc ListNotificationChannel(notifications.ListChannelRequest) returns (notifications.ListChannelResponse);
    rpc UpdateNotificationChannel(notifications.UpdateChannelRequest) returns (notifications.UpdateChannelResponse);
    rpc DeleteNotificationChannel(notifications.DeleteChannelRequest) returns (notifications.DeleteChannelResponse);

    // Notifications
    rpc SendNotification(notifications.SendRequest) returns (google.protobuf.Empty);
    rpc ListNotifications(notifications.ListRequest) returns (notifications.ListResponse);
    rpc SubscribeNotifications(notifications.SubscribeRequest) returns (stream notifications.Notification);

    // Privileged RPCs
    rpc CreateClient(privileged.CreateClientRequest) returns (privileged.CreateClientResponse);
    rpc ListClients(privileged.ListClientsRequest) returns (privileged.ListClientsResponse);
    rpc DeleteClient(privileged.DeleteClientRequest) returns (privileged.DeleteClientResponse);
    rpc UpdateClient(privileged.UpdateClientRequest) returns (privileged.UpdateClientResponse);

    // Dynamic DNS
    rpc CreateDNSRecord(dns.CreateDNSRecordRequest) returns (dns.CreateDNSRecordResponse);
    rpc ListDNSRecords(dns.ListDNSRecordsRequest) returns (dns.ListDNSRecordsResponse);
    rpc DeleteDNSRecord(dns.DeleteDNSRecordRequest) returns (dns.DeleteDNSRecordResponse);
    rpc UpdateDNSRecord(dns.UpdateDNSRecordRequest) returns (dns.UpdateDNSRecordResponse);

    // Remote Vibrator Control
    rpc StartVibrator(google.protobuf.Empty) returns (google.protobuf.Empty);
    rpc StopVibrator(google.protobuf.Empty) returns (google.protobuf.Empty);
}
