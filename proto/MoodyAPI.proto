syntax = "proto3";

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

import "common/common.proto";
import "privileged/privileged.proto";
import "notifications/notifications.proto";
import "wg/wg.proto";

package MoodyAPI;

option go_package = "api.mooody.me/models";

message OperationLog
{
    option (common.bun_opts) = {
        ormable : true,
        table : "operation_logs"
    };
    int64 id = 1 [ (common.bun_field) = { column : "id", primary_key : true, auto_increment : true } ];
    int64 clientId = 2 [ (common.bun_field) = { column : "client_id" } ];
    string clientName = 3 [ (common.bun_field) = { column : "client_name" } ];
    google.protobuf.Timestamp time = 4 [ (common.bun_field) = { column : "time" } ];
    string operation = 5 [ (common.bun_field) = { column : "operation" } ];
}

message CameraState
{
    bool state = 1;
}

message SubscribeCameraStateChangeRequest
{
    common.Auth auth = 1;
}

message UpdateCameraStateRequest
{
    common.Auth auth = 1;
    CameraState state = 2;
}

service MoodyAPIService
{
    rpc UpdateCameraState(UpdateCameraStateRequest) returns (google.protobuf.Empty);
    rpc SubscribeCameraStateChange(SubscribeCameraStateChangeRequest) returns (stream CameraState);

    rpc CreateNotificationChannel(notifications.CreateChannelRequest) returns (notifications.CreateChannelResponse);
    rpc ListNotificationChannel(notifications.ListChannelRequest) returns (notifications.ListChannelResponse);
    rpc UpdateNotificationChannel(notifications.UpdateChannelRequest) returns (notifications.UpdateChannelResponse);
    rpc DeleteNotificationChannel(notifications.DeleteChannelRequest) returns (notifications.DeleteChannelResponse);

    rpc SendNotification(notifications.SendRequest) returns (google.protobuf.Empty);
    rpc SubscribeNotifications(notifications.SubscribeRequest) returns (stream notifications.SubscribeResponse);

    // Privileged RPCs
    rpc CreateClient(privileged.CreateClientRequest) returns (privileged.CreateClientResponse);
    rpc ListClients(privileged.ListClientsRequest) returns (privileged.ListClientsResponse);
    rpc DeleteClient(privileged.DeleteClientRequest) returns (privileged.DeleteClientResponse);
    rpc UpdateClient(privileged.UpdateClientRequest) returns (privileged.UpdateClientResponse);

    // Create List Delete Update wireguard clients
    rpc CreateWireguardClient(wg.CreateClientRequest) returns (wg.CreateClientResponse);
    rpc ListWireguardClients(wg.ListWireguardClientsRequest) returns (wg.ListWireguardClientsResponse);
    rpc DeleteWireguardClient(wg.DeleteClientRequest) returns (wg.DeleteClientResponse);
    rpc UpdateWireguardClient(wg.UpdateClientRequest) returns (wg.UpdateClientResponse);
}
